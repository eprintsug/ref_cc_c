#!/usr/bin/perl -w

use FindBin;
use lib "$FindBin::Bin/../../../perl_lib";

use strict;
use warnings;
use Text::CSV;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use EPrints;
my $eprintid;
my $verbose = 0;
my $update;
my $output_file;
my $elements;

Getopt::Long::Configure("permute");

GetOptions( 
	'verbose+' => \$verbose,
	'eprintid=s' => \$eprintid,
	'update' => \$update,
   	'output=s' => \$output_file,
   	'elements' => \$elements,

);

# || pod2usage( 2 );
#pod2usage( 1 ) if $help;
#pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
#pod2usage( 2 ) if( scalar @ARGV != 1 ); 

my $repositoryid = $ARGV[0];

my $CSV_COUNT = 0;
my $UPDATE_COUNT = 0;
#unless($output_file) {die("Please supply an filename to output the results to");}

if(defined $update){
    my $warning_message = <<"END";
===You are about to run the REF Compliance Checker Checker in update mode!===

This means that the values calculated from the EPrints history will be used to update the following fields:
    - hoa_date_foa 
    - hoa_date_fcd

If you are unsure about any of the above say NO

Continue? [YES|NO]:
END

	print $warning_message;

   	my $answer = <STDIN>;
   	chomp $answer;
   	unless($answer =~ /YES|yes/){
		print "User said $answer, leaving now...\n";
		exit;
	}
}

#### Repo stuff ####
my $ep = EPrints->new();
my $repo = $ep->repository($repositoryid);
unless($repo) {die("could not find repository with id: $repositoryid");}
if(defined $output_file) {
   open(CSV_OUTPUT, '>', $output_file) or die("could not open $output_file: $!");
} else {
   *CSV_OUTPUT = *STDOUT;
}

#keep per eprint flag for compliance
my $hoa_comp = {};

my $max_id = &get_max_id;
&check_all;

print CSV_OUTPUT "\n" if(!defined $output_file);

print CSV_OUTPUT "eprintid,fcd,old_fcd,foa,old_foa,old_emb_len,emb_len";
print CSV_OUTPUT ",pub_date,date_embargo" if defined $elements;
print CSV_OUTPUT "\n";
print STDERR "\n";
while(my($eprintid,$data) = each(%$hoa_comp)){
	next if (!defined $data->{fcd} && !defined $data->{old_fcd} && !defined $data->{foa} && !defined $data->{old_foa});

	if(defined $update){
		my $eprint = undef;
		if(defined $data->{fcd} && $data->{fcd} ne $data->{old_fcd}){
			$eprint = $repo->dataset( "eprint" )->dataobj( $eprintid );
			$repo->log("Changing FCD from ".$data->{old_fcd}." to ".$data->{fcd}) if $verbose;
			$eprint->set_value("hoa_date_fcd", $data->{fcd});
		}
		if(defined $data->{foa} && $data->{foa} ne $data->{old_foa}){
			$eprint = $repo->dataset( "eprint" )->dataobj( $eprintid ) if(!defined $eprint);
			$repo->log("Changing FOA from ".$data->{old_foa}." to ".$data->{foa}) if $verbose;
			$eprint->set_value("hoa_date_foa", $data->{foa});
		}
		if(defined $data->{emb_len} && defined $data->{old_emb_len} && $data->{emb_len} ne $data->{old_emb_len}){
			$eprint = $repo->dataset( "eprint" )->dataobj( $eprintid ) if(!defined $eprint);
			$repo->log("Changing EMB_LEN from ".$data->{old_emb_len}." to ".$data->{emb_len}) if $verbose;
			$eprint->set_value("hoa_emb_len", $data->{emb_len});
		}
		if(defined $eprint){
			$eprint->commit;
			$UPDATE_COUNT++;
		}
	}

	my $fcd = $data->{fcd} || "";
	my $old_fcd = $data->{old_fcd} || "";
	my $foa = $data->{foa} || "";
	my $old_foa =$data->{old_foa} || "";
	my $old_emb_len = $data->{old_emb_len} || "";
	my $emb_len = $data->{emb_len} || "";
    my $pub_date = $data->{pub_date} || "";
    my $date_embargo = $data->{date_embargo} || "";

	print CSV_OUTPUT "$eprintid,$fcd,$old_fcd,$foa,$old_foa,$old_emb_len,$emb_len";
    print CSV_OUTPUT ",$pub_date,$date_embargo" if defined $elements;
    print CSV_OUTPUT."\n";

	$CSV_COUNT++;

}
#print STDERR Dumper($hoa_comp)."\n";

print "\nREPORTED $CSV_COUNT values\n";
print "UPDATED $UPDATE_COUNT values\n" if $update;

sub get_max_id {

	my $sql = "select counter from counters where countername = 'eprintid'";

	my $sth = $repo->get_database->prepare_select( $sql );
	$repo->get_database->execute( $sth , $sql );
	my $found = $sth->rows();

	my $max_id = $sth->fetchrow_array;

	return $max_id;
}
#not used yet
sub check_all {

	#Get all events where something was moved out of inbox and not into deletion
	#ie the hefce_oa definition of deposit
	# Elements: Checks all history events related to dataset eprints 
	my $sql = "select historyid,objectid from history where datasetid = 'eprint'";

	$sql.=" and objectid in ($eprintid) " if(defined $eprintid);
	#order by timestamp to make sure we assess each lift embargo event in cronologically
	$sql.=" order by objectid, timestamp_year, timestamp_month, timestamp_day, timestamp_hour, timestamp_minute, timestamp_second";

	my $sth = $repo->get_database->prepare_select( $sql );
	$repo->get_database->execute( $sth , $sql );
	my $found = $sth->rows();

	$repo->log("$found deposit events found...") if($verbose);

	#TODO check the compliance using revision data at this event.
	# if compliant then teimstamp == hoa_date_fcd
	# if not compliant future modification events should be checked to see if it becomes compliant
	check_compliance($sth);
	
}

sub check_compliance {

	my ($sth) = @_;

	my $objectid_field = $repo->dataset("history")->get_field( "objectid" );
	my $historyid_field = $repo->dataset("history")->get_field( "historyid" );

    	my $current_eprintid = 0;
   	my $current_eprint = undef;
	#Loop through the histor events returned by the SQL
	
	my $eprint;
	while( my @row = $sth->fetchrow_array )
	{

	    my $historyid = $historyid_field->value_from_sql_row( $repo, \@row );
	    my $eprintid = $objectid_field->value_from_sql_row( $repo, \@row );
            next if $hoa_comp->{$eprintid}->{ignore};

	    if($eprintid != $current_eprintid){
		print STDERR "\reprintid: ".$eprintid."/$max_id";
	        ($eprint) = $repo->get_dataset("eprint")->list([$eprintid])->get_records( 0, 1 );
	    }
#	    #We'll want the eprint object in question to get some key dates from that
#	    $hoa_comp->{$eprintid}->{ignore} = 1 if !defined $eprint;
	    next if !defined $eprint;
	    $hoa_comp->{$eprintid}->{eprint} = $eprint;

	    my $eprint_type = $eprint->value("type");
	    
	    #this is a new version of an item... dates may hav carried
	    $hoa_comp->{$eprintid}->{ignore} = 1 if($eprint->is_set("succeeds")); 
            # We have an FOA AND FCD calculated for this iitem no need to process further
	    $hoa_comp->{$eprintid}->{ignore} = 1 unless( defined $eprint_type && grep( /^$eprint_type$/, @{$repo->config( "hefce_oa", "item_types" )} ) );

            next if $hoa_comp->{$eprintid}->{ignore};

            next if $hoa_comp->{$eprintid}->{fcd} && $hoa_comp->{$eprintid}->{foa};
	    $current_eprintid = $eprintid;

	    $hoa_comp->{$eprintid}->{old_fcd} = $eprint->value("hoa_date_fcd");
	    $hoa_comp->{$eprintid}->{old_foa} = $eprint->value("hoa_date_foa");
	    $hoa_comp->{$eprintid}->{old_emb_len} = $eprint->value("hoa_emb_len");
	    #Get the history object
	    $repo->dataset("history")->list([$historyid])->map ( sub {
		    my( undef, undef, $history ) = @_;
			# We have an FOA/FCD calculated for this iitem no need to process further
			return if ! defined $history;

			my $rev_file = get_rev_file($history);
			$repo->log($eprintid." ".$eprint->value("type")) if $verbose;
			$repo->log("Action: ".$history->value("action")) if $verbose;
			$repo->log("Timestamp: ".$history->value("timestamp")) if $verbose;
			$repo->log("Revision file: ".$rev_file) if $verbose;

			unless($rev_file){
				$repo->log("Revision file not found for ".$history->get_id." (".$history->value("revision").")");
				return;
			}

			#This timestamp will be the date that the embargo was lifted
			my $timestamp = Time::Piece->strptime( $history->value("timestamp"), "%Y-%m-%d %H:%M:%S");
			my $pub_date = get_pub_date($eprint);
#			return if !defined $pub_date;
			#We'll need to look in that revision file to assess the state of play when the embargo was lifted
#			my $doc = XML::LibXML->load_xml(location => $rev_file);
			my $doc = failsafe_libxml_parse_file($rev_file);
			return unless(defined $doc);
		
			my $xpc = XML::LibXML::XPathContext->new( $doc );
			$xpc->registerNs( "ep" => "http://eprints.org/ep2/data/2.0" );
			my $eprint_status = $xpc->find('//ep:eprint_status')->to_literal;

	                #cehck that eprint is in archive or buffer
			return if($eprint_status ne "archive" && $eprint_status ne "buffer");
			#Check that there is any document present at all
			return unless( $xpc->findnodes('//ep:document') );
	
			# Check documents to see if there is *any* document that meets the comploance criteria
			for my $item ( $xpc->findnodes('//ep:document') ) {
				my $i_xpc = XML::LibXML::XPathContext->new( $item ); #boring!
				$i_xpc->registerNs( "ep" => "http://eprints.org/ep2/data/2.0" );
				my $content = $i_xpc->find('ep:content')->to_literal;
				my $security = $i_xpc->find('ep:security')->to_literal;
       	       			next unless $content;
        			next unless $content eq "accepted" || $content eq "published" || $content eq "published_online";

				my $new_date_value = $timestamp->strftime("%Y-%m-%d");

				if(!defined $hoa_comp->{$eprintid}->{fcd}){
		               		$hoa_comp->{$eprintid}->{fcd} = $new_date_value;
				}
                		if(!defined $hoa_comp->{$eprintid}->{foa} && $security eq "public" && $eprint_status eq "archive" ){
					$hoa_comp->{$eprintid}->{foa} = $new_date_value;
				}
				$hoa_comp->{$eprintid}->{emb_len} = '';
				$hoa_comp->{$eprintid}->{date_embargo} = '' if(defined $elements);
				$hoa_comp->{$eprintid}->{pub_date} = '' if(defined $elements);
				if($i_xpc->find('ep:date_embargo') && EPrints::Utils::is_set($pub_date)){ 
					my $date_embargo = get_embargo_date($i_xpc->find('ep:date_embargo')->to_literal);
	
					my $len = $date_embargo-$pub_date;
					my $emb_len = sprintf "%.0f", $len->months;

					$repo->log("Embargo detected ".$pub_date->strftime("%Y-%m-%d")." to ".$date_embargo->strftime("%Y-%m-%d")." ($emb_len)") if $verbose;
		            $hoa_comp->{$eprintid}->{emb_len} = $emb_len; #allow this one to be reset if date_embargo changes??
		            $hoa_comp->{$eprintid}->{pub_date} = $pub_date->strftime("%Y-%m-%d") if(defined $elements);
		            $hoa_comp->{$eprintid}->{date_embargo} = $date_embargo->strftime("%Y-%m-%d") if(defined $elements);
				}
			} #doc loop	
	   	}); #history object map
		#unset the "old" values if there are no newvalues
		$hoa_comp->{$eprintid}->{old_fcd} = undef if(!defined $hoa_comp->{$eprintid}->{fcd} || $hoa_comp->{$eprintid}->{fcd} eq "");
		$hoa_comp->{$eprintid}->{old_foa} = undef if(!defined $hoa_comp->{$eprintid}->{foa} || $hoa_comp->{$eprintid}->{foa} eq "");
		$hoa_comp->{$eprintid}->{old_emb_len} = undef if(!defined $hoa_comp->{$eprintid}->{emb_len} || $hoa_comp->{$eprintid}->{emb_len} eq "");
	} #sql result loop

}

sub failsafe_libxml_parse_file{

        my ($xml_file) = @_;

#        my $xml;
#        eval { $xml = $libxml->parse_file($xml_file); };
#        if($@){
#                $repo->log( "Could not fetch or process the file $xml_file" );
#                return undef;
#        }
#        return $xml;
	my $doc;
        eval { $doc = XML::LibXML->load_xml(location => $xml_file); };
        if($@){
                $repo->log( "\nCould not fetch or process the file $xml_file" );
                return undef;
        }
	return $doc;
}

sub get_rev_file {
	my($history) = @_;

	return if ! defined $history;

	#Get the revision data associated with the lift_embargo event
	my $rev_obj = $history->get_stored_file( "dataobj.xml" );
	if(!defined $rev_obj){
		if($history->value("action") ne "modify"){
			#mpved_to events do not have revision files but they do have modify events with the same revision
			return get_rev_file(get_modify($history));
		}else{
			return undef;
		}
	}
	return $rev_obj->get_local_copy;
}

sub get_modify
{
    my( $history ) = @_;

    my $dataset = $history->get_dataset;

    my $revision = $history->get_value( "revision" );

    my $results = $dataset->search(
        filters => [
            {
                meta_fields => [ "datasetid" ],
                value => $history->value( "datasetid" ),
            },
            {
                meta_fields => [ "objectid" ],
                value => $history->value( "objectid" ),
            },
            {
                meta_fields => [ "revision" ],
                value => $revision,
            },
            {
                meta_fields => [ "action" ],
                value => "modify",
            }
        ]);

    return $results->item( 0 );
}


sub get_pub_date{
	my ($eprint) = @_;

	#Can we depend on this being there?
	my $hoa_pub = $eprint->value("hoa_date_pub");
	
	return if !defined $hoa_pub;
	
	#We'll use the same mthods and criteria that the REF_CC uses.
	#First thing is to get a calcuable publication time
	my $pub_date;
	if( $repo->can_call( "hefce_oa", "handle_possibly_incomplete_date" ) )
	{
		$pub_date = $repo->call( [ "hefce_oa", "handle_possibly_incomplete_date" ], $hoa_pub );
	}
	if( !defined( $pub_date ) ) #above call can return undef - fallback to default
	{
		$pub_date = Time::Piece->strptime( $hoa_pub , "%Y-%m-%d" );
	}
	return $pub_date;
}

sub get_embargo_date{
	my ($embargo_date) = @_;

	#Can we depend on this being there?
	return if !defined $embargo_date;
	
	#We'll use the same mthods and criteria that the REF_CC uses.
	#First thing is to get a calcuable publication time
	my $emb_date;
	if( $repo->can_call( "hefce_oa", "handle_possibly_incomplete_date" ) )
	{
		$emb_date = $repo->call( [ "hefce_oa", "handle_possibly_incomplete_date" ], $embargo_date );
	}
	if( !defined( $emb_date ) ) #above call can return undef - fallback to default
	{
		$emb_date = Time::Piece->strptime( $embargo_date , "%Y-%m-%d" );
	}
	return $emb_date;
}


